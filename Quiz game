 * @author rakxu



import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

class Question {
    String questionText;
    List<String> options;
    int correctAnswerIndex;

    public Question(String questionText, List<String> options, int correctAnswerIndex) {
        this.questionText = questionText;
        this.options = options;
        this.correctAnswerIndex = correctAnswerIndex;
    }

    public String getQuestionText() {
        return questionText;
    }

    public List<String> getOptions() {
        return options;
    }

    public int getCorrectAnswerIndex() {
        return correctAnswerIndex;
    }
}

public class AdvancedQuizGame extends JFrame {
    private List<Question> questions;
    private int currentQuestionIndex = 0;
    private int score = 0;
    private JLabel questionLabel;
    private JRadioButton[] optionButtons;
    private ButtonGroup optionGroup;
    private JButton nextButton;
    private Timer timer;
    private int timeLeft = 30; // 30 seconds for each question
    private JLabel timerLabel;

    public AdvancedQuizGame() {
        setTitle("Advanced Quiz Game");
        setSize(500, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        initializeQuestions();
        initializeUIComponents();
        displayQuestion(0);
        startTimer();
    }

    private void initializeQuestions() {
        questions = new ArrayList<>();
        List<String> options1 = List.of("Option A", "Option B", "Option C", "Option D");
        questions.add(new Question("What is the capital of France?", options1, 1));
        List<String> options2 = List.of("Earth", "Mars", "Jupiter", "Venus");
        questions.add(new Question("Which planet is known as the Red Planet?", options2, 1));
        List<String> options3 = List.of("Blue", "Red", "Green", "Yellow");
        questions.add(new Question("What color is a banana?", options3, 3));
        // Add more questions as needed
    }

    private void initializeUIComponents() {
        questionLabel = new JLabel();
        questionLabel.setFont(new Font("Arial", Font.BOLD, 16));
        add(questionLabel, BorderLayout.NORTH);

        JPanel optionsPanel = new JPanel();
        optionsPanel.setLayout(new GridLayout(4, 1));
        optionButtons = new JRadioButton[4];
        optionGroup = new ButtonGroup();
        for (int i = 0; i < 4; i++) {
            optionButtons[i] = new JRadioButton();
            optionGroup.add(optionButtons[i]);
            optionsPanel.add(optionButtons[i]);
        }
        add(optionsPanel, BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel(new BorderLayout());
        timerLabel = new JLabel("Time Left: 30 seconds");
        bottomPanel.add(timerLabel, BorderLayout.WEST);

        nextButton = new JButton("Next");
        nextButton.addActionListener(e -> handleNextButtonClick());
        bottomPanel.add(nextButton, BorderLayout.EAST);

        add(bottomPanel, BorderLayout.SOUTH);
    }

    private void displayQuestion(int index) {
        Question question = questions.get(index);
        questionLabel.setText(question.getQuestionText());
        List<String> options = question.getOptions();
        for (int i = 0; i < optionButtons.length; i++) {
            optionButtons[i].setText(options.get(i));
        }
        optionGroup.clearSelection();
    }

    private void handleNextButtonClick() {
        if (optionGroup.getSelection() != null) {
            int selectedOption = -1;
            for (int i = 0; i < optionButtons.length; i++) {
                if (optionButtons[i].isSelected()) {
                    selectedOption = i;
                    break;
                }
            }

            if (selectedOption == questions.get(currentQuestionIndex).getCorrectAnswerIndex()) {
                score++;
            }

            currentQuestionIndex++;
            if (currentQuestionIndex < questions.size()) {
                displayQuestion(currentQuestionIndex);
                resetTimer();
            } else {
                endQuiz();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an option!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void startTimer() {
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                timeLeft--;
                timerLabel.setText("Time Left: " + timeLeft + " seconds");
                if (timeLeft <= 0) {
                    handleNextButtonClick();
                }
            }
        }, 1000, 1000);
    }

    private void resetTimer() {
        timeLeft = 30;
        timerLabel.setText("Time Left: 30 seconds");
    }

    private void endQuiz() {
        timer.cancel();
        JOptionPane.showMessageDialog(this, "Quiz over! Your score: " + score + "/" + questions.size());
        System.exit(0);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            AdvancedQuizGame game = new AdvancedQuizGame();
            game.setVisible(true);
        });
    }
}

